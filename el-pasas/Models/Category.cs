/*
 * eDocument API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace el_pasas.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Category : IEquatable<Category>
    { 
        /// <summary>
        /// Gets or Sets _9Name
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NameEnum
        {
            
            /// <summary>
            /// Enum AMEnum for AM
            /// </summary>
            [EnumMember(Value = "AM")]
            AMEnum = 1,
            
            /// <summary>
            /// Enum A1Enum for A1
            /// </summary>
            [EnumMember(Value = "A1")]
            A1Enum = 2,
            
            /// <summary>
            /// Enum B1Enum for B1
            /// </summary>
            [EnumMember(Value = "B1")]
            B1Enum = 3,
            
            /// <summary>
            /// Enum BEnum for B
            /// </summary>
            [EnumMember(Value = "B")]
            BEnum = 4,
            
            /// <summary>
            /// Enum D1Enum for D1
            /// </summary>
            [EnumMember(Value = "D1")]
            D1Enum = 5,
            
            /// <summary>
            /// Enum DEnum for D
            /// </summary>
            [EnumMember(Value = "D")]
            DEnum = 6,
            
            /// <summary>
            /// Enum BEEnum for BE
            /// </summary>
            [EnumMember(Value = "BE")]
            BEEnum = 7,
            
            /// <summary>
            /// Enum D1EEnum for D1E
            /// </summary>
            [EnumMember(Value = "D1E")]
            D1EEnum = 8,
            
            /// <summary>
            /// Enum DEEnum for DE
            /// </summary>
            [EnumMember(Value = "DE")]
            DEEnum = 9
        }

        /// <summary>
        /// Gets or Sets _9Name
        /// </summary>
        [DataMember(Name="9_name")]
        public NameEnum? _9Name { get; set; }

        /// <summary>
        /// Gets or Sets _10DateOfIssue
        /// </summary>
        [DataMember(Name="10_dateOfIssue")]
        public string _10DateOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets _11DateOfExpiry
        /// </summary>
        [DataMember(Name="11_dateOfExpiry")]
        public string _11DateOfExpiry { get; set; }

        /// <summary>
        /// Gets or Sets _12Code
        /// </summary>
        [DataMember(Name="12_code")]
        public string _12Code { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  _9Name: ").Append(_9Name).Append("\n");
            sb.Append("  _10DateOfIssue: ").Append(_10DateOfIssue).Append("\n");
            sb.Append("  _11DateOfExpiry: ").Append(_11DateOfExpiry).Append("\n");
            sb.Append("  _12Code: ").Append(_12Code).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Category)obj);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="other">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    _9Name == other._9Name ||
                    _9Name != null &&
                    _9Name.Equals(other._9Name)
                ) && 
                (
                    _10DateOfIssue == other._10DateOfIssue ||
                    _10DateOfIssue != null &&
                    _10DateOfIssue.Equals(other._10DateOfIssue)
                ) && 
                (
                    _11DateOfExpiry == other._11DateOfExpiry ||
                    _11DateOfExpiry != null &&
                    _11DateOfExpiry.Equals(other._11DateOfExpiry)
                ) && 
                (
                    _12Code == other._12Code ||
                    _12Code != null &&
                    _12Code.Equals(other._12Code)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_9Name != null)
                    hashCode = hashCode * 59 + _9Name.GetHashCode();
                    if (_10DateOfIssue != null)
                    hashCode = hashCode * 59 + _10DateOfIssue.GetHashCode();
                    if (_11DateOfExpiry != null)
                    hashCode = hashCode * 59 + _11DateOfExpiry.GetHashCode();
                    if (_12Code != null)
                    hashCode = hashCode * 59 + _12Code.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Category left, Category right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Category left, Category right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
