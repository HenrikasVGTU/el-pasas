/*
 * eDocument API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace el_pasas.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StudentIdentityCard : IEquatable<StudentIdentityCard>
    { 
        /// <summary>
        /// Gets or Sets StudentId
        /// </summary>
        [DataMember(Name="studentId")]
        public string StudentId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name="surname")]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets PersonalNo
        /// </summary>
        [DataMember(Name="personalNo")]
        public int? PersonalNo { get; set; }

        /// <summary>
        /// Gets or Sets StudiesAt
        /// </summary>
        [DataMember(Name="studiesAt")]
        public string StudiesAt { get; set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [DataMember(Name="validFrom")]
        public string ValidFrom { get; set; }

        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [DataMember(Name="validUntil")]
        public string ValidUntil { get; set; }

        /// <summary>
        /// Gets or Sets Spd
        /// </summary>
        [DataMember(Name="spd")]
        public int? Spd { get; set; }

        /// <summary>
        /// Gets or Sets Barcode
        /// </summary>
        [DataMember(Name="barcode")]
        public string Barcode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StudentIdentityCard {\n");
            sb.Append("  StudentId: ").Append(StudentId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  PersonalNo: ").Append(PersonalNo).Append("\n");
            sb.Append("  StudiesAt: ").Append(StudiesAt).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  Spd: ").Append(Spd).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StudentIdentityCard)obj);
        }

        /// <summary>
        /// Returns true if StudentIdentityCard instances are equal
        /// </summary>
        /// <param name="other">Instance of StudentIdentityCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StudentIdentityCard other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StudentId == other.StudentId ||
                    StudentId != null &&
                    StudentId.Equals(other.StudentId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Surname == other.Surname ||
                    Surname != null &&
                    Surname.Equals(other.Surname)
                ) && 
                (
                    PersonalNo == other.PersonalNo ||
                    PersonalNo != null &&
                    PersonalNo.Equals(other.PersonalNo)
                ) && 
                (
                    StudiesAt == other.StudiesAt ||
                    StudiesAt != null &&
                    StudiesAt.Equals(other.StudiesAt)
                ) && 
                (
                    ValidFrom == other.ValidFrom ||
                    ValidFrom != null &&
                    ValidFrom.Equals(other.ValidFrom)
                ) && 
                (
                    ValidUntil == other.ValidUntil ||
                    ValidUntil != null &&
                    ValidUntil.Equals(other.ValidUntil)
                ) && 
                (
                    Spd == other.Spd ||
                    Spd != null &&
                    Spd.Equals(other.Spd)
                ) && 
                (
                    Barcode == other.Barcode ||
                    Barcode != null &&
                    Barcode.Equals(other.Barcode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StudentId != null)
                    hashCode = hashCode * 59 + StudentId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Surname != null)
                    hashCode = hashCode * 59 + Surname.GetHashCode();
                    if (PersonalNo != null)
                    hashCode = hashCode * 59 + PersonalNo.GetHashCode();
                    if (StudiesAt != null)
                    hashCode = hashCode * 59 + StudiesAt.GetHashCode();
                    if (ValidFrom != null)
                    hashCode = hashCode * 59 + ValidFrom.GetHashCode();
                    if (ValidUntil != null)
                    hashCode = hashCode * 59 + ValidUntil.GetHashCode();
                    if (Spd != null)
                    hashCode = hashCode * 59 + Spd.GetHashCode();
                    if (Barcode != null)
                    hashCode = hashCode * 59 + Barcode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StudentIdentityCard left, StudentIdentityCard right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StudentIdentityCard left, StudentIdentityCard right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
