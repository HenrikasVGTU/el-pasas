/*
 * eDocument API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace el_pasas.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DrivingLicence : IEquatable<DrivingLicence>
    { 
        /// <summary>
        /// Gets or Sets _1Surname
        /// </summary>
        [DataMember(Name="1_surname")]
        public string _1Surname { get; set; }

        /// <summary>
        /// Gets or Sets _2Name
        /// </summary>
        [DataMember(Name="2_name")]
        public string _2Name { get; set; }

        /// <summary>
        /// Gets or Sets _3DateOfBirth
        /// </summary>
        [DataMember(Name="3_dateOfBirth")]
        public string _3DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets _4aDateOfIssue
        /// </summary>
        [DataMember(Name="4a_dateOfIssue")]
        public string _4aDateOfIssue { get; set; }

        /// <summary>
        /// Gets or Sets _4bDateOfExpiry
        /// </summary>
        [DataMember(Name="4b_dateOfExpiry")]
        public string _4bDateOfExpiry { get; set; }

        /// <summary>
        /// Gets or Sets _4cIssuedBy
        /// </summary>
        [DataMember(Name="4c_issuedBy")]
        public string _4cIssuedBy { get; set; }

        /// <summary>
        /// Gets or Sets _4dPersonalNo
        /// </summary>
        [DataMember(Name="4d_personalNo")]
        public int? _4dPersonalNo { get; set; }

        /// <summary>
        /// Gets or Sets _5LicenceNo
        /// </summary>
        [DataMember(Name="5_licenceNo")]
        public int? _5LicenceNo { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories")]
        public List<Category> Categories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DrivingLicence {\n");
            sb.Append("  _1Surname: ").Append(_1Surname).Append("\n");
            sb.Append("  _2Name: ").Append(_2Name).Append("\n");
            sb.Append("  _3DateOfBirth: ").Append(_3DateOfBirth).Append("\n");
            sb.Append("  _4aDateOfIssue: ").Append(_4aDateOfIssue).Append("\n");
            sb.Append("  _4bDateOfExpiry: ").Append(_4bDateOfExpiry).Append("\n");
            sb.Append("  _4cIssuedBy: ").Append(_4cIssuedBy).Append("\n");
            sb.Append("  _4dPersonalNo: ").Append(_4dPersonalNo).Append("\n");
            sb.Append("  _5LicenceNo: ").Append(_5LicenceNo).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DrivingLicence)obj);
        }

        /// <summary>
        /// Returns true if DrivingLicence instances are equal
        /// </summary>
        /// <param name="other">Instance of DrivingLicence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DrivingLicence other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    _1Surname == other._1Surname ||
                    _1Surname != null &&
                    _1Surname.Equals(other._1Surname)
                ) && 
                (
                    _2Name == other._2Name ||
                    _2Name != null &&
                    _2Name.Equals(other._2Name)
                ) && 
                (
                    _3DateOfBirth == other._3DateOfBirth ||
                    _3DateOfBirth != null &&
                    _3DateOfBirth.Equals(other._3DateOfBirth)
                ) && 
                (
                    _4aDateOfIssue == other._4aDateOfIssue ||
                    _4aDateOfIssue != null &&
                    _4aDateOfIssue.Equals(other._4aDateOfIssue)
                ) && 
                (
                    _4bDateOfExpiry == other._4bDateOfExpiry ||
                    _4bDateOfExpiry != null &&
                    _4bDateOfExpiry.Equals(other._4bDateOfExpiry)
                ) && 
                (
                    _4cIssuedBy == other._4cIssuedBy ||
                    _4cIssuedBy != null &&
                    _4cIssuedBy.Equals(other._4cIssuedBy)
                ) && 
                (
                    _4dPersonalNo == other._4dPersonalNo ||
                    _4dPersonalNo != null &&
                    _4dPersonalNo.Equals(other._4dPersonalNo)
                ) && 
                (
                    _5LicenceNo == other._5LicenceNo ||
                    _5LicenceNo != null &&
                    _5LicenceNo.Equals(other._5LicenceNo)
                ) && 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_1Surname != null)
                    hashCode = hashCode * 59 + _1Surname.GetHashCode();
                    if (_2Name != null)
                    hashCode = hashCode * 59 + _2Name.GetHashCode();
                    if (_3DateOfBirth != null)
                    hashCode = hashCode * 59 + _3DateOfBirth.GetHashCode();
                    if (_4aDateOfIssue != null)
                    hashCode = hashCode * 59 + _4aDateOfIssue.GetHashCode();
                    if (_4bDateOfExpiry != null)
                    hashCode = hashCode * 59 + _4bDateOfExpiry.GetHashCode();
                    if (_4cIssuedBy != null)
                    hashCode = hashCode * 59 + _4cIssuedBy.GetHashCode();
                    if (_4dPersonalNo != null)
                    hashCode = hashCode * 59 + _4dPersonalNo.GetHashCode();
                    if (_5LicenceNo != null)
                    hashCode = hashCode * 59 + _5LicenceNo.GetHashCode();
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DrivingLicence left, DrivingLicence right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DrivingLicence left, DrivingLicence right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
